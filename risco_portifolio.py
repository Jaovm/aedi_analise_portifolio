"""
Utiliza√ß√£o de Simula√ß√µes de Monte Carlo para An√°lise de Risco e Retorno de Portif√≥lio de A√ß√µes

Utiliza streamlit para interface gr√°fica.


Autor: Fernando sola Pereira
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from scipy.stats import t
import matplotlib.pyplot as plt
import plotly.express as px


# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide")
st.title('An√°lise de Risco e Retorno de Portif√≥lio de A√ß√µes')

# Sidebar
st.sidebar.header('Par√¢metros')

# Horizonte de tempo (em dias)
horizon = st.sidebar.text_input('Horizonte de Tempo (dias)', 30)

# Graus de liberdade da distribui√ß√£o t de Student
degrees_freedom = st.sidebar.text_input('Graus de Liberdade', 5)

# N√≠vel de confian√ßa para o VaR
confidence_level = st.sidebar.text_input('N√≠vel de Confian√ßa', 95)

# N√∫mero de simula√ß√µes de Monte Carlo
n_simulations = st.sidebar.text_input('N√∫mero de Simula√ß√µes', 1000)


# T√≠tulo da se√ß√£o de dados
st.sidebar.markdown('## Per√≠odo para o Hist√≥rico')

# Per√≠odo de an√°lise dos dados hist√≥ricos
col3, col4 = st.sidebar.columns(2)

with col3:
    inicio = st.text_input('Data de In√≠cio', '2010-01-01')

with col4:
    fim = st.text_input('Data de Fim', '2024-10-31')

# T√≠tulo da se√ß√£o de dados
st.sidebar.markdown('## Dados dos Ativos')

# Ticker e peso dos ativos
col1, col2 = st.sidebar.columns(2)

#colocar 6 tickers das principais a√ß√µes da B3
s_tickers = ['PETR4.SA', 'VALE3.SA', 'ITUB4.SA', 'BBDC4.SA', 'ABEV3.SA', 'B3SA3.SA']
s_weights = [1/6] * 6

tickers = []
weights = []
for i in range(6):
    with col1:
        ticker = st.text_input(f'Ticker do Ativo {i+1}', s_tickers[i-1])
        tickers.append(ticker)
    with col2:
        weight = st.text_input(f'Peso do Ativo {i+1}', f'{s_weights[i-1]:.4}')
        weights.append(weight)


# definir layout em 2 colunas dados, graficos
container = st.container()
col_dados, col_graficos = container.columns(2)

# documentar o processo em markdown
md = """

## Introdu√ß√£o

A Simula√ß√£o de Monte Carlo √© uma t√©cnica utilizada para modelar sistemas complexo e incertos, permitindo a \
an√°lise de resultados em diferentes cen√°rios aleat√≥rios. Neste projeto, utiliza-se a simula√ß√£o de Monte Carlo \
para analisar o risco e retorno de um portif√≥lio de a√ß√µes. Assim, foi escolhida a distribui√ß√£o t Student para
estimar o Value at Risk (VaR) de um portif√≥lio de a√ß√µes.

## Fundamentos Estat√≠sticos da Simula√ß√£o

A distribui√ß√£o t de Student √© uma distribui√ß√£o de probabilidade que √© utilizada para estimar a m√©dia de uma \
popula√ß√£o quando a amostra √© pequena e a popula√ß√£o tem uma distribui√ß√£o normal. A distribui√ß√£o t de Student √© \
comumente utilizada para calcular intervalos de confian√ßa e testes de hip√≥teses.

Matematicamente, a distribui√ß√£o t de Student com ùúà graus de liberdade √© definida pela fun√ß√£o de densidade de \
probabilidade:"""

col_dados.markdown(md)

latex_code = r"""
f(t) = \frac{\Gamma \left( \frac{\nu + 1}{2} \right)}{\sqrt{\nu \pi} \Gamma \left( \frac{\nu}{2} \right)} \left( 1 + \frac{t^2}{\nu} \right)^{-\frac{\nu + 1}{2}}
"""
col_dados.latex(latex_code)


md = """\
onde Œì √© a fun√ß√£o gama e ùúà representa os graus de liberdade.

"""
col_dados.markdown(md)

   
# Filtrar tickers e pesos v√°lidos
valid_tickers = [ticker for ticker in tickers if ticker]
valid_weights = [float(weights[i]) for i in range(len(tickers)) if tickers[i]]

# Normalizar os pesos para somarem 1
total_weight = sum(valid_weights)
normalized_weights = [weight / total_weight for weight in valid_weights]

# Baixar os dados hist√≥ricos
dados = {}
for ticker in valid_tickers:
    dados[ticker] = yf.download(ticker, start=inicio, end=fim)

# Calcular os retornos di√°rios para cada ativo
retornos = {}
for ticker in valid_tickers:
    dados[ticker]['Retorno'] = dados[ticker]['Adj Close'].pct_change()
    dados[ticker] = dados[ticker].dropna()
    retornos[ticker] = {
        'Retorno M√©dio Di√°rio': dados[ticker]['Retorno'].mean(),
        'Volatilidade M√©dia Di√°ria': dados[ticker]['Retorno'].std()
    }

# Criar um DataFrame com os resultados
resultados = pd.DataFrame(retornos).T.reset_index().rename(columns={'index': 'Ticker'})

# Exibir o DataFrame na coluna de dados sem o √≠ndice
col_graficos.write(resultados)

# Par√¢metros da distribui√ß√£o t de Student para os retornos dos ativos
n_s = int(n_simulations)
n_h = int(horizon)
simulated_returns = []

for i, ticker in enumerate(valid_tickers):
    df = int(degrees_freedom)
    loc = retornos[ticker]['Retorno M√©dio Di√°rio']
    scale = retornos[ticker]['Volatilidade M√©dia Di√°ria']
    simulated_returns.append(normalized_weights[i] * t.rvs(df=df, loc=loc, scale=scale, size=(n_s, n_h)))

# C√°lculo dos retornos di√°rios da carteira
portfolio_returns = np.sum(simulated_returns, axis=0)

# C√°lculo dos retornos acumulados da carteira para o horizonte de tempo
cumulative_returns = np.prod(1 + portfolio_returns, axis=1) - 1

# C√°lculo do VaR (95% de confian√ßa)
VaR = np.percentile(cumulative_returns, 100 - float(confidence_level))

# Impress√£o do resultado
col_graficos.write(f'VaR ({confidence_level}% de confian√ßa) para {horizon} dias: {VaR:.4f}')

# Histograma dos retornos acumulados da carteira

fig = px.histogram(
    cumulative_returns, 
    nbins=200, 
    labels={'value': 'Retorno Acumulado da Carteira'}, 
    title=f'Distribui√ß√£o dos Retornos da Carteira ({horizon} dias)'
)

fig.update_layout(xaxis_title='Retorno Acumulado da Carteira', yaxis_title='Frequ√™ncia')    
col_graficos.plotly_chart(fig)

